CREATE TABLE IF NOT EXISTS users (
    id    INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    name  VARCHAR(255) NOT NULL,
    email VARCHAR(512) NOT NULL,
    CONSTRAINT pk_user PRIMARY KEY (id),
    CONSTRAINT UQ_USER_EMAIL UNIQUE (email)
);

CREATE TABLE IF NOT EXISTS categories (
    id    INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    name  VARCHAR(255) NOT NULL,
    CONSTRAINT pk_category PRIMARY KEY (id),
    CONSTRAINT uq_categor_name UNIQUE (name)
);

CREATE TABLE IF NOT EXISTS events (
    id          INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    annotation  VARCHAR(2000)   NOT NULL,
    category_id INTEGER         NOT NULL REFERENCES categories(id),
    description VARCHAR(7000)   NOT NULL,
    event_date  TIMESTAMP WITHOUT TIME ZONE NULL,
    lat         DECIMAL        NOT NULL,
    lon         DECIMAL        NOT NULL,
    paid        BOOLEAN         NULL,
    participant_limit   INTEGER NULL,
    request_moderation  BOOLEAN NULL,
    title       VARCHAR(120)    NOT NULL,
    -------------------------------------
    user_id     INTEGER         NOT NULL REFERENCES users(id),
    created     TIMESTAMP WITHOUT TIME ZONE NOT NULL,
    state       INTEGER,
    published   TIMESTAMP WITHOUT TIME ZONE,
    views       INTEGER,
    confirmed_requests   INTEGER,
    CONSTRAINT pk_event PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS compilations (
    id          INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    title       VARCHAR(50) NOT NULL,
    pinned      BOOLEAN     NOT NULL,
    CONSTRAINT pk_compilation PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS compilation_events (
    compilation_id  INTEGER NOT NULL REFERENCES compilations(id),
    event_id        INTEGER NOT NULL REFERENCES events(id),
    CONSTRAINT pk_compilation_event PRIMARY KEY (compilation_id, event_id)
);
CREATE INDEX IF NOT EXISTS idx_compilation_events_compilation_id ON compilation_events(compilation_id);

CREATE TABLE IF NOT EXISTS requests (
    id          INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    event_id    INTEGER     NOT NULL REFERENCES events(id),
    created     TIMESTAMP WITHOUT TIME ZONE NOT NULL,
    user_id     INTEGER     NOT NULL REFERENCES users(id),
    status      INTEGER     NOT NULL,
    CONSTRAINT pk_request PRIMARY KEY (id)
);
CREATE INDEX IF NOT EXISTS idx_requests_event_id ON requests(event_id);
CREATE INDEX IF NOT EXISTS idx_requests_user_id ON requests(user_id);

CREATE TABLE IF NOT EXISTS event_views (
event_id        INTEGER NOT NULL REFERENCES events(id),
ip              VARCHAR(50) NOT NULL,
CONSTRAINT pk_event_views PRIMARY KEY (event_id, ip)
);
CREATE TABLE IF NOT EXISTS comments (
    id          INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    event_id    INTEGER     NOT NULL REFERENCES events(id),
    user_id     INTEGER     NOT NULL REFERENCES users(id),
    text        VARCHAR(512) NOT NULL,
    likes       INTEGER     DEFAULT 0 NOT NULL,
    dislikes    INTEGER     DEFAULT 0 NOT NULL,
    created     TIMESTAMP WITHOUT TIME ZONE NOT NULL,
    modified    TIMESTAMP WITHOUT TIME ZONE,
    CONSTRAINT pk_comments PRIMARY KEY (id)
);
CREATE INDEX IF NOT EXISTS idx_comments_event_id ON comments(event_id);
CREATE INDEX IF NOT EXISTS idx_comments_user_id ON comments(user_id);

CREATE TABLE IF NOT EXISTS comment_likes (
    id              INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    comment_id      INTEGER NOT NULL REFERENCES comments(id) ON DELETE CASCADE,
    user_id         INTEGER NOT NULL REFERENCES users(id),
    is_liked        BOOLEAN NOT NULL,
    CONSTRAINT pk_comment_user PRIMARY KEY (comment_id, user_id)
);